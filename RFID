#include <SPI.h>
#include <MFRC522.h>
#define RST_PIN 9
#define SS_PIN 10
#define LED_GREEN 3
#define LED_RED 2
#define BUZZER 6

MFRC522 mfrc522(SS_PIN, RST_PIN);
byte tag1[4] = {0x33, 0x4A, 0x4F, 0x25};
byte tag2[4] = {0x63, 0x5C, 0x63, 0x09};
byte tagActual[4];

void setup() {
  Serial.begin(9600);
  while (!Serial);  // Wait for Serial Monitor
  SPI.begin();
  mfrc522.PCD_Init();
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_RED, OUTPUT);
  pinMode(BUZZER, OUTPUT);
}

void loop() {
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;
  }

  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  Serial.print(F("Card UID: "));
  dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
  digitalWrite(LED_GREEN, LOW);
  digitalWrite(LED_RED, LOW);
  noTone(BUZZER);

  for (byte i = 0; i < 4; i++) {
    tagActual[i] = mfrc522.uid.uidByte[i];
  }

  Serial.print("UID leÃ­do: ");
  for (byte i = 0; i < 4; i++) {
    Serial.print(tagActual[i], HEX);
    Serial.print(" ");
  }
  Serial.println();

  // Check if the card is recognized
  if (compararArray(tagActual, tag1) || compararArray(tagActual, tag2)) {
    Serial.println("Acceso Permitido...");
    digitalWrite(LED_GREEN, HIGH);  
    tone(BUZZER, 200); 
    delay(4000);       
    digitalWrite(LED_GREEN, LOW);  
    noTone(BUZZER);
  } else {
    Serial.println("Acceso Denegado...");
    digitalWrite(LED_RED, HIGH);  
    tone(BUZZER, 400); 
    delay(4000);       
    digitalWrite(LED_RED, LOW);  
    noTone(BUZZER);
  }
}

void dump_byte_array(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
  Serial.println();
}

boolean compararArray(byte Array1[], byte Array2[]) {
  for (byte i = 0; i < 4; i++) {
    if (Array1[i] != Array2[i]) {
      return false;
    }
  }
  return true;
}
